// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bustsurvivor.proto

package bustsurvivor

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BustSurvivalRequest struct {
	CardsToPick   int64 `protobuf:"varint,1,opt,name=cards_to_pick,json=cardsToPick,proto3" json:"cards_to_pick,omitempty"`
	BustThreshold int64 `protobuf:"varint,2,opt,name=bust_threshold,json=bustThreshold,proto3" json:"bust_threshold,omitempty"`
}

func (m *BustSurvivalRequest) Reset()      { *m = BustSurvivalRequest{} }
func (*BustSurvivalRequest) ProtoMessage() {}
func (*BustSurvivalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_127111138f306cf8, []int{0}
}
func (m *BustSurvivalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BustSurvivalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BustSurvivalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BustSurvivalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BustSurvivalRequest.Merge(m, src)
}
func (m *BustSurvivalRequest) XXX_Size() int {
	return m.Size()
}
func (m *BustSurvivalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BustSurvivalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BustSurvivalRequest proto.InternalMessageInfo

func (m *BustSurvivalRequest) GetCardsToPick() int64 {
	if m != nil {
		return m.CardsToPick
	}
	return 0
}

func (m *BustSurvivalRequest) GetBustThreshold() int64 {
	if m != nil {
		return m.BustThreshold
	}
	return 0
}

type BustSurvivalResponse struct {
	Probability *Fraction `protobuf:"bytes,1,opt,name=probability,proto3" json:"probability,omitempty"`
	Error       string    `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *BustSurvivalResponse) Reset()      { *m = BustSurvivalResponse{} }
func (*BustSurvivalResponse) ProtoMessage() {}
func (*BustSurvivalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_127111138f306cf8, []int{1}
}
func (m *BustSurvivalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BustSurvivalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BustSurvivalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BustSurvivalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BustSurvivalResponse.Merge(m, src)
}
func (m *BustSurvivalResponse) XXX_Size() int {
	return m.Size()
}
func (m *BustSurvivalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BustSurvivalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BustSurvivalResponse proto.InternalMessageInfo

func (m *BustSurvivalResponse) GetProbability() *Fraction {
	if m != nil {
		return m.Probability
	}
	return nil
}

func (m *BustSurvivalResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type Fraction struct {
	Numerator   int64 `protobuf:"fixed64,1,opt,name=numerator,proto3" json:"numerator,omitempty"`
	Denominator int64 `protobuf:"fixed64,2,opt,name=denominator,proto3" json:"denominator,omitempty"`
}

func (m *Fraction) Reset()      { *m = Fraction{} }
func (*Fraction) ProtoMessage() {}
func (*Fraction) Descriptor() ([]byte, []int) {
	return fileDescriptor_127111138f306cf8, []int{2}
}
func (m *Fraction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fraction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fraction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fraction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fraction.Merge(m, src)
}
func (m *Fraction) XXX_Size() int {
	return m.Size()
}
func (m *Fraction) XXX_DiscardUnknown() {
	xxx_messageInfo_Fraction.DiscardUnknown(m)
}

var xxx_messageInfo_Fraction proto.InternalMessageInfo

func (m *Fraction) GetNumerator() int64 {
	if m != nil {
		return m.Numerator
	}
	return 0
}

func (m *Fraction) GetDenominator() int64 {
	if m != nil {
		return m.Denominator
	}
	return 0
}

func init() {
	proto.RegisterType((*BustSurvivalRequest)(nil), "bustsurvivor.BustSurvivalRequest")
	proto.RegisterType((*BustSurvivalResponse)(nil), "bustsurvivor.BustSurvivalResponse")
	proto.RegisterType((*Fraction)(nil), "bustsurvivor.Fraction")
}

func init() { proto.RegisterFile("bustsurvivor.proto", fileDescriptor_127111138f306cf8) }

var fileDescriptor_127111138f306cf8 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x31, 0x4f, 0x02, 0x31,
	0x14, 0xc7, 0x5b, 0x8c, 0x46, 0x7a, 0xa0, 0xa6, 0x12, 0x43, 0x8c, 0x79, 0xc1, 0x26, 0x26, 0x4e,
	0x0c, 0xe8, 0xe0, 0xcc, 0xe0, 0xe0, 0x64, 0x0e, 0x12, 0x47, 0xbc, 0x3b, 0x6a, 0xa8, 0xc0, 0xf5,
	0x7c, 0xed, 0x91, 0xb8, 0xf9, 0x11, 0xfc, 0x18, 0x7e, 0x14, 0x47, 0x46, 0x46, 0x29, 0x8b, 0x23,
	0x1f, 0xc1, 0x50, 0x42, 0x3c, 0x12, 0xe3, 0xf8, 0x7e, 0xef, 0x9f, 0xf7, 0xff, 0xf7, 0x5f, 0xc6,
	0xe3, 0xdc, 0x58, 0x93, 0xe3, 0x44, 0x4d, 0x34, 0x36, 0x33, 0xd4, 0x56, 0xf3, 0x4a, 0x91, 0x89,
	0x47, 0x76, 0xdc, 0xce, 0x8d, 0xed, 0xf8, 0x39, 0x1a, 0x85, 0xf2, 0x25, 0x97, 0xc6, 0x72, 0xc1,
	0xaa, 0x49, 0x84, 0x7d, 0xd3, 0xb3, 0xba, 0x97, 0xa9, 0x64, 0x58, 0xa7, 0x0d, 0x7a, 0xb9, 0x13,
	0x06, 0x1e, 0x76, 0xf5, 0xbd, 0x4a, 0x86, 0xfc, 0x82, 0x1d, 0xac, 0x4e, 0xf5, 0xec, 0x00, 0xa5,
	0x19, 0xe8, 0x51, 0xbf, 0x5e, 0xf2, 0xa2, 0xea, 0x8a, 0x76, 0x37, 0x50, 0x3c, 0xb1, 0xda, 0xb6,
	0x83, 0xc9, 0x74, 0x6a, 0x24, 0xbf, 0x61, 0x41, 0x86, 0x3a, 0x8e, 0x62, 0x35, 0x52, 0xf6, 0xd5,
	0x1b, 0x04, 0xad, 0x93, 0xe6, 0x56, 0xe2, 0x5b, 0x8c, 0x12, 0xab, 0x74, 0x1a, 0x16, 0xa5, 0xbc,
	0xc6, 0x76, 0x25, 0xa2, 0x46, 0xef, 0x57, 0x0e, 0xd7, 0x83, 0xb8, 0x63, 0xfb, 0x1b, 0x39, 0x3f,
	0x63, 0xe5, 0x34, 0x1f, 0x4b, 0x8c, 0xac, 0x46, 0x7f, 0xf9, 0x28, 0xfc, 0x05, 0xbc, 0xc1, 0x82,
	0xbe, 0x4c, 0xf5, 0x58, 0xa5, 0x7e, 0x5f, 0xf2, 0xfb, 0x22, 0x6a, 0x3d, 0xb3, 0xc3, 0x4d, 0xde,
	0x8e, 0xc4, 0x89, 0x4a, 0x24, 0x7f, 0x60, 0x95, 0xe2, 0x33, 0xf8, 0xf9, 0x76, 0xd2, 0x3f, 0x4a,
	0x3c, 0x15, 0xff, 0x49, 0xd6, 0x2d, 0x08, 0xd2, 0xbe, 0x9e, 0xce, 0x81, 0xcc, 0xe6, 0x40, 0x96,
	0x73, 0xa0, 0x6f, 0x0e, 0xe8, 0x87, 0x03, 0xfa, 0xe9, 0x80, 0x4e, 0x1d, 0xd0, 0x2f, 0x07, 0xf4,
	0xdb, 0x01, 0x59, 0x3a, 0xa0, 0xef, 0x0b, 0x20, 0xd3, 0x05, 0x90, 0xd9, 0x02, 0x48, 0xbc, 0xe7,
	0x3f, 0xf3, 0xea, 0x27, 0x00, 0x00, 0xff, 0xff, 0xba, 0xbc, 0x7a, 0xae, 0xe2, 0x01, 0x00, 0x00,
}

func (this *BustSurvivalRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BustSurvivalRequest)
	if !ok {
		that2, ok := that.(BustSurvivalRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CardsToPick != that1.CardsToPick {
		return false
	}
	if this.BustThreshold != that1.BustThreshold {
		return false
	}
	return true
}
func (this *BustSurvivalResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BustSurvivalResponse)
	if !ok {
		that2, ok := that.(BustSurvivalResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Probability.Equal(that1.Probability) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *Fraction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Fraction)
	if !ok {
		that2, ok := that.(Fraction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Numerator != that1.Numerator {
		return false
	}
	if this.Denominator != that1.Denominator {
		return false
	}
	return true
}
func (this *BustSurvivalRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&bustsurvivor.BustSurvivalRequest{")
	s = append(s, "CardsToPick: "+fmt.Sprintf("%#v", this.CardsToPick)+",\n")
	s = append(s, "BustThreshold: "+fmt.Sprintf("%#v", this.BustThreshold)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BustSurvivalResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&bustsurvivor.BustSurvivalResponse{")
	if this.Probability != nil {
		s = append(s, "Probability: "+fmt.Sprintf("%#v", this.Probability)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Fraction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&bustsurvivor.Fraction{")
	s = append(s, "Numerator: "+fmt.Sprintf("%#v", this.Numerator)+",\n")
	s = append(s, "Denominator: "+fmt.Sprintf("%#v", this.Denominator)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBustsurvivor(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SurvivalServiceClient is the client API for SurvivalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SurvivalServiceClient interface {
	BustSurvival(ctx context.Context, in *BustSurvivalRequest, opts ...grpc.CallOption) (*BustSurvivalResponse, error)
}

type survivalServiceClient struct {
	cc *grpc.ClientConn
}

func NewSurvivalServiceClient(cc *grpc.ClientConn) SurvivalServiceClient {
	return &survivalServiceClient{cc}
}

func (c *survivalServiceClient) BustSurvival(ctx context.Context, in *BustSurvivalRequest, opts ...grpc.CallOption) (*BustSurvivalResponse, error) {
	out := new(BustSurvivalResponse)
	err := c.cc.Invoke(ctx, "/bustsurvivor.SurvivalService/BustSurvival", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurvivalServiceServer is the server API for SurvivalService service.
type SurvivalServiceServer interface {
	BustSurvival(context.Context, *BustSurvivalRequest) (*BustSurvivalResponse, error)
}

// UnimplementedSurvivalServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSurvivalServiceServer struct {
}

func (*UnimplementedSurvivalServiceServer) BustSurvival(ctx context.Context, req *BustSurvivalRequest) (*BustSurvivalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BustSurvival not implemented")
}

func RegisterSurvivalServiceServer(s *grpc.Server, srv SurvivalServiceServer) {
	s.RegisterService(&_SurvivalService_serviceDesc, srv)
}

func _SurvivalService_BustSurvival_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BustSurvivalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurvivalServiceServer).BustSurvival(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bustsurvivor.SurvivalService/BustSurvival",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurvivalServiceServer).BustSurvival(ctx, req.(*BustSurvivalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SurvivalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bustsurvivor.SurvivalService",
	HandlerType: (*SurvivalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BustSurvival",
			Handler:    _SurvivalService_BustSurvival_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bustsurvivor.proto",
}

func (m *BustSurvivalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BustSurvivalRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CardsToPick != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBustsurvivor(dAtA, i, uint64(m.CardsToPick))
	}
	if m.BustThreshold != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBustsurvivor(dAtA, i, uint64(m.BustThreshold))
	}
	return i, nil
}

func (m *BustSurvivalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BustSurvivalResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Probability != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBustsurvivor(dAtA, i, uint64(m.Probability.Size()))
		n1, err1 := m.Probability.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBustsurvivor(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *Fraction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fraction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Numerator != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Numerator))
		i += 8
	}
	if m.Denominator != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Denominator))
		i += 8
	}
	return i, nil
}

func encodeVarintBustsurvivor(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BustSurvivalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardsToPick != 0 {
		n += 1 + sovBustsurvivor(uint64(m.CardsToPick))
	}
	if m.BustThreshold != 0 {
		n += 1 + sovBustsurvivor(uint64(m.BustThreshold))
	}
	return n
}

func (m *BustSurvivalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Probability != nil {
		l = m.Probability.Size()
		n += 1 + l + sovBustsurvivor(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovBustsurvivor(uint64(l))
	}
	return n
}

func (m *Fraction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Numerator != 0 {
		n += 9
	}
	if m.Denominator != 0 {
		n += 9
	}
	return n
}

func sovBustsurvivor(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBustsurvivor(x uint64) (n int) {
	return sovBustsurvivor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BustSurvivalRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BustSurvivalRequest{`,
		`CardsToPick:` + fmt.Sprintf("%v", this.CardsToPick) + `,`,
		`BustThreshold:` + fmt.Sprintf("%v", this.BustThreshold) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BustSurvivalResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BustSurvivalResponse{`,
		`Probability:` + strings.Replace(this.Probability.String(), "Fraction", "Fraction", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Fraction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Fraction{`,
		`Numerator:` + fmt.Sprintf("%v", this.Numerator) + `,`,
		`Denominator:` + fmt.Sprintf("%v", this.Denominator) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBustsurvivor(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BustSurvivalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBustsurvivor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BustSurvivalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BustSurvivalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardsToPick", wireType)
			}
			m.CardsToPick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBustsurvivor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardsToPick |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BustThreshold", wireType)
			}
			m.BustThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBustsurvivor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BustThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBustsurvivor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBustsurvivor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBustsurvivor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BustSurvivalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBustsurvivor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BustSurvivalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BustSurvivalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Probability", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBustsurvivor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBustsurvivor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBustsurvivor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Probability == nil {
				m.Probability = &Fraction{}
			}
			if err := m.Probability.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBustsurvivor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBustsurvivor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBustsurvivor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBustsurvivor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBustsurvivor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBustsurvivor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fraction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBustsurvivor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fraction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fraction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numerator", wireType)
			}
			m.Numerator = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Numerator = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denominator", wireType)
			}
			m.Denominator = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Denominator = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipBustsurvivor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBustsurvivor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBustsurvivor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBustsurvivor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBustsurvivor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBustsurvivor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBustsurvivor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBustsurvivor
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthBustsurvivor
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBustsurvivor
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBustsurvivor(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthBustsurvivor
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBustsurvivor = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBustsurvivor   = fmt.Errorf("proto: integer overflow")
)
